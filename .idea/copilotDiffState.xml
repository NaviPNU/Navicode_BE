<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Navicode/DATABASE_GUIDE.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/DATABASE_GUIDE.md" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/MYSQL_SETUP.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/MYSQL_SETUP.md" />
              <option name="originalContent" value="# MySQL 설정 가이드&#10;&#10;##  빠른 시작 (MySQL 없이)&#10;&#10;프로젝트를 받은 후 바로 실행하려면:&#10;&#10;```bash&#10;# 1. 프로젝트 다운로드&#10;git clone [프로젝트 URL]&#10;cd Navicode&#10;&#10;# 2. 바로 실행 (MySQL 설치 불필요!)&#10;./gradlew bootRun&#10;&#10;# 3. 테스트&#10;curl -X POST http://localhost:8080/api/auth/register \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpass123&quot;}'&#10;```&#10;&#10;## ️ MySQL 사용하기&#10;&#10;### 1단계: MySQL 설치 및 설정&#10;&#10;#### macOS (Homebrew 사용)&#10;```bash&#10;# MySQL 설치&#10;brew install mysql&#10;&#10;# MySQL 서비스 시작&#10;brew services start mysql&#10;&#10;# MySQL 접속 (비밀번호 설정)&#10;mysql -u root -p&#10;&#10;# 데이터베이스 생성&#10;CREATE DATABASE navicode;&#10;CREATE USER 'navicode_user'@'localhost' IDENTIFIED BY 'your_password';&#10;GRANT ALL PRIVILEGES ON navicode.* TO 'navicode_user'@'localhost';&#10;FLUSH PRIVILEGES;&#10;EXIT;&#10;```&#10;&#10;#### Windows&#10;1. [MySQL 공식 사이트](https://dev.mysql.com/downloads/mysql/)에서 MySQL 다운로드&#10;2. 설치 프로그램 실행&#10;3. MySQL Workbench에서 데이터베이스 생성:&#10;   ```sql&#10;   CREATE DATABASE navicode;&#10;   ```&#10;&#10;#### Linux (Ubuntu/Debian)&#10;```bash&#10;# MySQL 설치&#10;sudo apt update&#10;sudo apt install mysql-server&#10;&#10;# MySQL 보안 설정&#10;sudo mysql_secure_installation&#10;&#10;# 데이터베이스 생성&#10;sudo mysql -u root -p&#10;CREATE DATABASE navicode;&#10;EXIT;&#10;```&#10;&#10;### 2단계: 애플리케이션 설정&#10;&#10;#### 방법 1: dev 프로파일 사용 (권장)&#10;```bash&#10;./gradlew bootRun --args='--spring.profiles.active=dev'&#10;```&#10;&#10;#### 방법 2: 환경변수 사용&#10;```bash&#10;export SPRING_PROFILES_ACTIVE=shared&#10;export DB_URL=jdbc:mysql://localhost:3306/navicode&#10;export DB_USERNAME=your_username&#10;export DB_PASSWORD=your_password&#10;./gradlew bootRun&#10;```&#10;&#10;#### 방법 3: application-dev.properties 수정&#10;`src/main/resources/application-dev.properties` 파일 편집:&#10;```properties&#10;spring.datasource.url=jdbc:mysql://localhost:3306/navicode?serverTimezone=Asia/Seoul&#10;spring.datasource.username=your_username&#10;spring.datasource.password=your_password&#10;```&#10;&#10;### 3단계: 실행 확인&#10;&#10;```bash&#10;# 회원가입 테스트&#10;curl -X POST http://localhost:8080/api/auth/register \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpass123&quot;}'&#10;&#10;# 로그인 테스트&#10;curl -X POST http://localhost:8080/api/auth/login \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpass123&quot;}'&#10;```&#10;&#10;##  문제 해결&#10;&#10;### MySQL 연결 오류 시&#10;```bash&#10;# MySQL 서비스 상태 확인&#10;# macOS&#10;brew services list | grep mysql&#10;&#10;# Linux&#10;sudo systemctl status mysql&#10;&#10;# Windows (관리자 권한 CMD)&#10;net start mysql&#10;```&#10;&#10;### 포트 충돌 시&#10;```bash&#10;# 다른 포트 사용&#10;./gradlew bootRun --args='--server.port=8081'&#10;```&#10;&#10;### 권한 오류 시&#10;```sql&#10;-- MySQL에서 권한 재설정&#10;GRANT ALL PRIVILEGES ON navicode.* TO 'your_username'@'localhost';&#10;FLUSH PRIVILEGES;&#10;```&#10;&#10;##  프로파일별 사용법&#10;&#10;| 프로파일 | 사용 시기 | 명령어 |&#10;|---------|---------|--------|&#10;| `local` | 빠른 개발/테스트 | `./gradlew bootRun` |&#10;| `dev` | MySQL과 함께 개발 | `./gradlew bootRun --args='--spring.profiles.active=dev'` |&#10;| `shared` | 배포/공유 환경 | 환경변수 설정 후 실행 |&#10;" />
              <option name="updatedContent" value="# MySQL 설정 가이드&#10;&#10;##  H2 사용 (MySQL 없이)&#10;&#10;```bash&#10;./gradlew bootRun&#10;```&#10;&#10;## ️ MySQL 사용&#10;&#10;### 1. MySQL 설치&#10;```bash&#10;# macOS&#10;brew install mysql&#10;brew services start mysql&#10;&#10;# Windows&#10;MySQL 공식 사이트에서 다운로드 후 설치&#10;&#10;# Linux&#10;sudo apt install mysql-server&#10;```&#10;&#10;### 2. 데이터베이스 생성&#10;```bash&#10;mysql -u root -p&#10;CREATE DATABASE navicode;&#10;EXIT;&#10;```&#10;&#10;### 3. 실행&#10;```bash&#10;./gradlew bootRun --args='--spring.profiles.active=dev'&#10;```&#10;&#10;### 4. 테스트&#10;```bash&#10;# 회원가입&#10;curl -X POST http://localhost:8080/api/auth/register \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpass123&quot;}'&#10;&#10;# 로그인&#10;curl -X POST http://localhost:8080/api/auth/login \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;: &quot;testuser&quot;, &quot;password&quot;: &quot;testpass123&quot;}'&#10;```" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/README.md" />
              <option name="originalContent" value="# Navicode Backend&#10;&#10;## 환경 설정&#10;&#10;이 프로젝트는 다양한 환경에서 쉽게 사용할 수 있도록 프로파일 기반 설정을 제공합니다.&#10;&#10;### 1. 로컬 개발 환경 (H2 인메모리 DB)&#10;```bash&#10;./gradlew bootRun --args='--spring.profiles.active=local'&#10;```&#10;또는 환경변수로:&#10;```bash&#10;export SPRING_PROFILES_ACTIVE=local&#10;./gradlew bootRun&#10;```&#10;&#10;### 2. 개발 서버 환경 (MySQL)&#10;```bash&#10;./gradlew bootRun --args='--spring.profiles.active=dev'&#10;```&#10;&#10;### 3. 공유용 환경 (환경변수 사용)&#10;```bash&#10;export SPRING_PROFILES_ACTIVE=shared&#10;export DB_URL=jdbc:mysql://your-db-host:3306/your-db-name&#10;export DB_USERNAME=your-username&#10;export DB_PASSWORD=your-password&#10;export DB_DRIVER=com.mysql.cj.jdbc.Driver&#10;export JPA_DDL_AUTO=update&#10;export JPA_DIALECT=org.hibernate.dialect.MySQLDialect&#10;export JWT_SECRET=your-secret-key&#10;./gradlew bootRun&#10;```&#10;&#10;## API 엔드포인트&#10;&#10;### 인증 API&#10;- POST `/api/auth/register` - 회원가입&#10;- POST `/api/auth/login` - 로그인&#10;&#10;" />
              <option name="updatedContent" value="# Navicode Backend&#10;&#10;##  빠른 시작 (H2 사용)&#10;&#10;MySQL 설치 없이 바로 실행:&#10;```bash&#10;./gradlew bootRun&#10;```&#10;&#10;## 환경 설정&#10;&#10;### 1. 로컬 개발 (H2 인메모리 DB) - 기본값&#10;```bash&#10;./gradlew bootRun&#10;```&#10;&#10;### 2. MySQL 사용&#10;```bash&#10;./gradlew bootRun --args='--spring.profiles.active=dev'&#10;```&#10;&#10;## API 엔드포인트&#10;&#10;### 인증 API&#10;- POST `/api/auth/register` - 회원가입&#10;- POST `/api/auth/login` - 로그인" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/build.gradle" />
              <option name="originalContent" value="plugins {&#10;&#9;id 'java'&#10;&#9;id 'org.springframework.boot' version '3.5.4'&#10;&#9;id 'io.spring.dependency-management' version '1.1.7'&#10;}&#10;&#10;group = 'com.example'&#10;version = '0.0.1-SNAPSHOT'&#10;&#10;java {&#10;&#9;toolchain {&#10;&#9;&#9;languageVersion = JavaLanguageVersion.of(17)&#10;&#9;}&#10;}&#10;&#10;configurations {&#10;&#9;compileOnly {&#10;&#9;&#9;extendsFrom annotationProcessor&#10;&#9;}&#10;}&#10;&#10;repositories {&#10;&#9;mavenCentral()&#10;}&#10;&#10;dependencies {&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-data-jpa'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-security'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-validation'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-web'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-api:0.11.5'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'&#10;&#9;compileOnly 'org.projectlombok:lombok'&#10;&#9;developmentOnly 'org.springframework.boot:spring-boot-devtools'&#10;&#9;runtimeOnly 'com.mysql:mysql-connector-j'&#10;&#9;annotationProcessor 'org.projectlombok:lombok'&#10;&#9;testImplementation 'org.springframework.boot:spring-boot-starter-test'&#10;&#9;testImplementation 'org.springframework.security:spring-security-test'&#10;&#9;testRuntimeOnly 'org.junit.platform:junit-platform-launcher'&#10;}&#10;&#10;tasks.named('test') {&#10;&#9;useJUnitPlatform()&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;&#9;id 'java'&#10;&#9;id 'org.springframework.boot' version '3.5.4'&#10;&#9;id 'io.spring.dependency-management' version '1.1.7'&#10;}&#10;&#10;group = 'com.example'&#10;version = '0.0.1-SNAPSHOT'&#10;&#10;java {&#10;&#9;toolchain {&#10;&#9;&#9;languageVersion = JavaLanguageVersion.of(17)&#10;&#9;}&#10;}&#10;&#10;configurations {&#10;&#9;compileOnly {&#10;&#9;&#9;extendsFrom annotationProcessor&#10;&#9;}&#10;}&#10;&#10;repositories {&#10;&#9;mavenCentral()&#10;}&#10;&#10;dependencies {&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-data-jpa'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-security'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-validation'&#10;&#9;implementation 'org.springframework.boot:spring-boot-starter-web'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-api:0.11.5'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'&#10;&#9;implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'&#10;&#9;compileOnly 'org.projectlombok:lombok'&#10;&#9;developmentOnly 'org.springframework.boot:spring-boot-devtools'&#10;&#9;runtimeOnly 'com.h2database:h2'&#10;&#9;runtimeOnly 'com.mysql:mysql-connector-j'&#10;&#9;annotationProcessor 'org.projectlombok:lombok'&#10;&#9;testImplementation 'org.springframework.boot:spring-boot-starter-test'&#10;&#9;testImplementation 'org.springframework.security:spring-security-test'&#10;&#9;testRuntimeOnly 'org.junit.platform:junit-platform-launcher'&#10;}&#10;&#10;tasks.named('test') {&#10;&#9;useJUnitPlatform()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/Main.java" />
              <option name="originalContent" value="package com.example.auth;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Main.class, args);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Main.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.example.auth.config;&#10;&#10;import com.example.auth.security.JwtAuthenticationFilter;&#10;import com.example.auth.security.JwtTokenProvider;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    @Autowired&#10;    private JwtTokenProvider jwtTokenProvider;&#10;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/api/auth/login&quot;, &quot;/api/auth/register&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                );&#10;&#10;        http.addFilterBefore(&#10;                new JwtAuthenticationFilter(jwtTokenProvider, userDetailsService),&#10;                UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.config;&#10;&#10;import com.example.navicode.auth.security.JwtAuthenticationFilter;&#10;import com.example.navicode.auth.security.JwtTokenProvider;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    @Autowired&#10;    private JwtTokenProvider jwtTokenProvider;&#10;&#10;    @Autowired&#10;    private UserDetailsService userDetailsService;&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/api/auth/login&quot;, &quot;/api/auth/register&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                );&#10;&#10;        http.addFilterBefore(&#10;                new JwtAuthenticationFilter(jwtTokenProvider, userDetailsService),&#10;                UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {&#10;        return authConfig.getAuthenticationManager();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/controller/AuthController.java" />
              <option name="originalContent" value="package com.example.auth.controller;&#10;&#10;import com.example.auth.dto.LoginRequest;&#10;import com.example.auth.dto.LoginResponse;&#10;import com.example.auth.dto.RegisterRequest;&#10;import com.example.auth.service.AuthService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;public class AuthController {&#10;    @Autowired&#10;    private AuthService authService;&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public LoginResponse login(@RequestBody LoginRequest loginRequest) {&#10;        return authService.login(loginRequest.getUsername(), loginRequest.getPassword());&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public LoginResponse register(@RequestBody RegisterRequest registerRequest) {&#10;        return authService.register(registerRequest.getUsername(), registerRequest.getPassword());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.controller;&#10;&#10;import com.example.navicode.auth.dto.LoginRequest;&#10;import com.example.navicode.auth.dto.LoginResponse;&#10;import com.example.navicode.auth.dto.RegisterRequest;&#10;import com.example.navicode.auth.service.AuthService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;public class AuthController {&#10;    @Autowired&#10;    private AuthService authService;&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public LoginResponse login(@RequestBody LoginRequest loginRequest) {&#10;        return authService.login(loginRequest.getUsername(), loginRequest.getPassword());&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public LoginResponse register(@RequestBody RegisterRequest registerRequest) {&#10;        return authService.register(registerRequest.getUsername(), registerRequest.getPassword());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/LoginRequest.java" />
              <option name="originalContent" value="package com.example.auth.dto;&#10;&#10;public class LoginRequest {&#10;    private String username;&#10;    private String password;&#10;&#10;    public LoginRequest() {}&#10;&#10;    public LoginRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.navicode.auth.dto;&#10;&#10;public class LoginRequest {&#10;    private String username;&#10;    private String password;&#10;&#10;    public LoginRequest() {}&#10;&#10;    public LoginRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/LoginResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/LoginResponse.java" />
              <option name="originalContent" value="package com.example.auth.dto;&#10;&#10;public class LoginResponse {&#10;    private boolean success;&#10;    private String token;&#10;    private String message;&#10;&#10;    public LoginResponse(boolean success, String token, String message) {&#10;        this.success = success;&#10;        this.token = token;&#10;        this.message = message;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public boolean isSuccess() {&#10;        return success;&#10;    }&#10;&#10;    public void setSuccess(boolean success) {&#10;        this.success = success;&#10;    }&#10;&#10;    public String getToken() {&#10;        return token;&#10;    }&#10;&#10;    public void setToken(String token) {&#10;        this.token = token;&#10;    }&#10;&#10;    public String getMessage() {&#10;        return message;&#10;    }&#10;&#10;    public void setMessage(String message) {&#10;        this.message = message;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.dto;&#10;&#10;public class LoginResponse {&#10;    private boolean success;&#10;    private String token;&#10;    private String message;&#10;&#10;    public LoginResponse(boolean success, String token, String message) {&#10;        this.success = success;&#10;        this.token = token;&#10;        this.message = message;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public boolean isSuccess() {&#10;        return success;&#10;    }&#10;&#10;    public void setSuccess(boolean success) {&#10;        this.success = success;&#10;    }&#10;&#10;    public String getToken() {&#10;        return token;&#10;    }&#10;&#10;    public void setToken(String token) {&#10;        this.token = token;&#10;    }&#10;&#10;    public String getMessage() {&#10;        return message;&#10;    }&#10;&#10;    public void setMessage(String message) {&#10;        this.message = message;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/dto/RegisterRequest.java" />
              <option name="originalContent" value="package com.example.auth.dto;&#10;&#10;public class RegisterRequest {&#10;    private String username;&#10;    private String password;&#10;&#10;    public RegisterRequest() {}&#10;&#10;    public RegisterRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.navicode.auth.dto;&#10;&#10;public class RegisterRequest {&#10;    private String username;&#10;    private String password;&#10;&#10;    public RegisterRequest() {}&#10;&#10;    public RegisterRequest(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/model/User.java" />
              <option name="originalContent" value="package com.example.auth.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(unique = true, nullable = false)&#10;    private String username;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    // 기본 생성자&#10;    public User() {}&#10;&#10;    // 생성자&#10;    public User(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.navicode.auth.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(unique = true, nullable = false)&#10;    private String username;&#10;&#10;    @Column(nullable = false)&#10;    private String password;&#10;&#10;    // 기본 생성자&#10;    public User() {}&#10;&#10;    // 생성자&#10;    public User(String username, String password) {&#10;        this.username = username;&#10;        this.password = password;&#10;    }&#10;&#10;    // Getter와 Setter&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/repository/UserRepository.java" />
              <option name="originalContent" value="package com.example.auth.repository;&#10;&#10;import com.example.auth.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    User findByUsername(String username);&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.navicode.auth.repository;&#10;&#10;import com.example.navicode.auth.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, Long&gt; {&#10;    User findByUsername(String username);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/security/JwtAuthenticationFilter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/security/JwtAuthenticationFilter.java" />
              <option name="originalContent" value="package com.example.auth.security;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;public class JwtAuthenticationFilter extends OncePerRequestFilter {&#10;&#10;    private JwtTokenProvider jwtTokenProvider;&#10;    private UserDetailsService userDetailsService;&#10;&#10;    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {&#10;        this.jwtTokenProvider = jwtTokenProvider;&#10;        this.userDetailsService = userDetailsService;&#10;    }&#10;&#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&#10;            throws ServletException, IOException {&#10;        String token = getTokenFromRequest(request);&#10;&#10;        if (token != null &amp;&amp; jwtTokenProvider.validateToken(token)) {&#10;            String username = jwtTokenProvider.getUsernameFromToken(token);&#10;            UserDetails userDetails = userDetailsService.loadUserByUsername(username);&#10;&#10;            UsernamePasswordAuthenticationToken authentication =&#10;                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;&#10;            SecurityContextHolder.getContext().setAuthentication(authentication);&#10;        }&#10;&#10;        filterChain.doFilter(request, response);&#10;    }&#10;&#10;    private String getTokenFromRequest(HttpServletRequest request) {&#10;        String bearerToken = request.getHeader(&quot;Authorization&quot;);&#10;        if (bearerToken != null &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {&#10;            return bearerToken.substring(7);&#10;        }&#10;        return null;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.security;&#10;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import java.io.IOException;&#10;&#10;public class JwtAuthenticationFilter extends OncePerRequestFilter {&#10;&#10;    private JwtTokenProvider jwtTokenProvider;&#10;    private UserDetailsService userDetailsService;&#10;&#10;    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {&#10;        this.jwtTokenProvider = jwtTokenProvider;&#10;        this.userDetailsService = userDetailsService;&#10;    }&#10;&#10;    @Override&#10;    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)&#10;            throws ServletException, IOException {&#10;        String token = getTokenFromRequest(request);&#10;&#10;        if (token != null &amp;&amp; jwtTokenProvider.validateToken(token)) {&#10;            String username = jwtTokenProvider.getUsernameFromToken(token);&#10;            UserDetails userDetails = userDetailsService.loadUserByUsername(username);&#10;&#10;            UsernamePasswordAuthenticationToken authentication =&#10;                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;&#10;            SecurityContextHolder.getContext().setAuthentication(authentication);&#10;        }&#10;&#10;        filterChain.doFilter(request, response);&#10;    }&#10;&#10;    private String getTokenFromRequest(HttpServletRequest request) {&#10;        String bearerToken = request.getHeader(&quot;Authorization&quot;);&#10;        if (bearerToken != null &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {&#10;            return bearerToken.substring(7);&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/security/JwtTokenProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/security/JwtTokenProvider.java" />
              <option name="originalContent" value="package com.example.navicode.auth.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtTokenProvider {&#10;    private final String secretKey = &quot;yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm&quot;;&#10;    private final long validityInMilliseconds = 3600000; // 1시간&#10;&#10;    private Key getSigningKey() {&#10;        return Keys.hmacShaKeyFor(secretKey.getBytes());&#10;    }&#10;&#10;    public String createToken(String username) {&#10;        Claims claims = Jwts.claims().setSubject(username);&#10;        Date now = new Date();&#10;        Date validity = new Date(now.getTime() + validityInMilliseconds);&#10;&#10;        return Jwts.builder()&#10;                .setClaims(claims)&#10;                .setIssuedAt(now)&#10;                .setExpiration(validity)&#10;                .signWith(getSigningKey(), SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    public String getUsernameFromToken(String token) {&#10;        return Jwts.parserBuilder()&#10;                .setSigningKey(getSigningKey())&#10;                .build()&#10;                .parseClaimsJws(token)&#10;                .getBody()&#10;                .getSubject();&#10;    }&#10;&#10;    public boolean validateToken(String token) {&#10;        try {&#10;            Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token);&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.security;&#10;&#10;import io.jsonwebtoken.*;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtTokenProvider {&#10;    @Value(&quot;${jwt.secret}&quot;)&#10;    private String secretKey;&#10;&#10;    @Value(&quot;${jwt.expiration}&quot;)&#10;    private long validityInMilliseconds;&#10;&#10;    private Key getSigningKey() {&#10;        return Keys.hmacShaKeyFor(secretKey.getBytes());&#10;    }&#10;&#10;    public String createToken(String username) {&#10;        Claims claims = Jwts.claims().setSubject(username);&#10;        Date now = new Date();&#10;        Date validity = new Date(now.getTime() + validityInMilliseconds);&#10;&#10;        return Jwts.builder()&#10;                .setClaims(claims)&#10;                .setIssuedAt(now)&#10;                .setExpiration(validity)&#10;                .signWith(getSigningKey(), SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    public String getUsernameFromToken(String token) {&#10;        return Jwts.parserBuilder()&#10;                .setSigningKey(getSigningKey())&#10;                .build()&#10;                .parseClaimsJws(token)&#10;                .getBody()&#10;                .getSubject();&#10;    }&#10;&#10;    public boolean validateToken(String token) {&#10;        try {&#10;            Jwts.parserBuilder().setSigningKey(getSigningKey()).build().parseClaimsJws(token);&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/service/AuthService.java" />
              <option name="originalContent" value="package com.example.auth.service;&#10;&#10;import com.example.auth.dto.LoginResponse;&#10;import com.example.auth.model.User;&#10;import com.example.auth.repository.UserRepository;&#10;import com.example.auth.security.JwtTokenProvider;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class AuthService {&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    private JwtTokenProvider jwtTokenProvider;&#10;&#10;    public LoginResponse login(String username, String password) {&#10;        User user = userRepository.findByUsername(username);&#10;        if (user != null &amp;&amp; passwordEncoder.matches(password, user.getPassword())) {&#10;            String token = jwtTokenProvider.createToken(username);&#10;            return new LoginResponse(true, token, &quot;로그인 성공&quot;);&#10;        }&#10;        return new LoginResponse(false, null, &quot;아이디 또는 비밀번호가 올바르지 않습니다.&quot;);&#10;    }&#10;&#10;    public LoginResponse register(String username, String password) {&#10;        if (userRepository.findByUsername(username) != null) {&#10;            return new LoginResponse(false, null, &quot;이미 존재하는 사용자입니다.&quot;);&#10;        }&#10;&#10;        User newUser = new User();&#10;        newUser.setUsername(username);&#10;        newUser.setPassword(passwordEncoder.encode(password));&#10;        userRepository.save(newUser);&#10;&#10;        return new LoginResponse(true, null, &quot;회원가입 성공&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.auth.service;&#10;&#10;import com.example.navicode.auth.dto.LoginResponse;&#10;import com.example.navicode.auth.model.User;&#10;import com.example.navicode.auth.repository.UserRepository;&#10;import com.example.navicode.auth.security.JwtTokenProvider;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class AuthService {&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    private JwtTokenProvider jwtTokenProvider;&#10;&#10;    public LoginResponse login(String username, String password) {&#10;        User user = userRepository.findByUsername(username);&#10;        if (user != null &amp;&amp; passwordEncoder.matches(password, user.getPassword())) {&#10;            String token = jwtTokenProvider.createToken(username);&#10;            return new LoginResponse(true, token, &quot;로그인 성공&quot;);&#10;        }&#10;        return new LoginResponse(false, null, &quot;아이디 또는 비밀번호가 올바르지 않습니다.&quot;);&#10;    }&#10;&#10;    public LoginResponse register(String username, String password) {&#10;        if (userRepository.findByUsername(username) != null) {&#10;            return new LoginResponse(false, null, &quot;이미 존재하는 사용자입니다.&quot;);&#10;        }&#10;&#10;        User newUser = new User();&#10;        newUser.setUsername(username);&#10;        newUser.setPassword(passwordEncoder.encode(password));&#10;        userRepository.save(newUser);&#10;&#10;        return new LoginResponse(true, null, &quot;회원가입 성공&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/service/CustomUserDetailsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/auth/service/CustomUserDetailsService.java" />
              <option name="originalContent" value="package com.example.auth.service;&#10;&#10;import com.example.auth.model.User;&#10;import com.example.auth.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        User user = userRepository.findByUsername(username);&#10;        if (user == null) {&#10;            throw new UsernameNotFoundException(&quot;사용자를 찾을 수 없습니다: &quot; + username);&#10;        }&#10;&#10;        return org.springframework.security.core.userdetails.User.builder()&#10;                .username(user.getUsername())&#10;                .password(user.getPassword())&#10;                .roles(&quot;USER&quot;)&#10;                .build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.navicode.auth.service;&#10;&#10;import com.example.navicode.auth.model.User;&#10;import com.example.navicode.auth.repository.UserRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class CustomUserDetailsService implements UserDetailsService {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Override&#10;    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&#10;        User user = userRepository.findByUsername(username);&#10;        if (user == null) {&#10;            throw new UsernameNotFoundException(&quot;사용자를 찾을 수 없습니다: &quot; + username);&#10;        }&#10;&#10;        return org.springframework.security.core.userdetails.User.builder()&#10;                .username(user.getUsername())&#10;                .password(user.getPassword())&#10;                .roles(&quot;USER&quot;)&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/dto/LocationRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/dto/LocationRequest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/entity/Location.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/entity/Location.java" />
              <option name="originalContent" value="package com.exapmple.navicode.locationapi.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;public class Location {&#10;&#10;    @Id&#10;    private String navicode;&#10;&#10;    private double lat;&#10;    private double lon;&#10;&#10;    private String name;&#10;    private String description;&#10;&#10;    private String type; // Static or Dynamic&#10;&#10;    private String username;&#10;}" />
              <option name="updatedContent" value="package com.example.navicode.locationapi.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;&#10;@Entity&#10;@Getter&#10;@Setter&#10;public class Location {&#10;&#10;    @Id&#10;    private String navicode;&#10;&#10;    private double lat;&#10;    private double lon;&#10;&#10;    private String name;&#10;    private String description;&#10;&#10;    private String type; // Static or Dynamic&#10;&#10;    private String username;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/repository/LocationRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/repository/LocationRepository.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/service/LocationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/java/com/example/navicode/locationapi/service/LocationService.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/resources/application-dev.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/resources/application-dev.properties" />
              <option name="originalContent" value="# 개발 서버 환경 (MySQL)&#10;spring.datasource.url=jdbc:mysql://localhost:3306/navicode?serverTimezone=Asia/Seoul&#10;spring.datasource.username=root&#10;spring.datasource.password=root123&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect&#10;&#10;# JWT 설정&#10;jwt.secret=yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm&#10;jwt.expiration=3600000&#10;" />
              <option name="updatedContent" value="# 개발 서버 환경 (MySQL)&#10;spring.datasource.url=jdbc:mysql://localhost:3306/navicode?serverTimezone=Asia/Seoul&#10;spring.datasource.username=root&#10;spring.datasource.password=&#10;spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver&#10;&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect&#10;&#10;# JWT 설정&#10;jwt.secret=yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm&#10;jwt.expiration=3600000" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/resources/application-local.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/resources/application-local.properties" />
              <option name="originalContent" value="# 로컬 개발환경 설정 (H2 인메모리 데이터베이스)&#10;spring.datasource.url=jdbc:h2:mem:testdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;spring.h2.console.enabled=true&#10;&#10;spring.jpa.hibernate.ddl-auto=create-drop&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;&#10;# JWT 설정&#10;jwt.secret=yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm&#10;jwt.expiration=3600000&#10;" />
              <option name="updatedContent" value="# 로컬 개발환경 (H2 인메모리 데이터베이스)&#10;spring.datasource.url=jdbc:h2:mem:testdb&#10;spring.datasource.driverClassName=org.h2.Driver&#10;spring.datasource.username=sa&#10;spring.datasource.password=password&#10;spring.h2.console.enabled=true&#10;&#10;spring.jpa.hibernate.ddl-auto=create-drop&#10;spring.jpa.database-platform=org.hibernate.dialect.H2Dialect&#10;&#10;# JWT 설정&#10;jwt.secret=yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm&#10;jwt.expiration=3600000" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/resources/application-shared.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/resources/application-shared.properties" />
              <option name="updatedContent" value="# 공유용 환경 설정 (환경변수 사용)&#10;spring.datasource.url=${DB_URL:jdbc:h2:mem:testdb}&#10;spring.datasource.username=${DB_USERNAME:sa}&#10;spring.datasource.password=${DB_PASSWORD:password}&#10;spring.datasource.driver-class-name=${DB_DRIVER:org.h2.Driver}&#10;&#10;# H2 콘솔 (H2 사용시에만)&#10;spring.h2.console.enabled=${H2_CONSOLE_ENABLED:true}&#10;&#10;# JPA 설정&#10;spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:create-drop}&#10;spring.jpa.database-platform=${JPA_DIALECT:org.hibernate.dialect.H2Dialect}&#10;&#10;# JWT 설정&#10;jwt.secret=${JWT_SECRET:yourVeryVerySecretKeyThatShouldBeLongEnoughForHS256Algorithm}&#10;jwt.expiration=${JWT_EXPIRATION:3600000}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Navicode/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Navicode/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=Navicode&#10;&#10;# 기본 프로파일 설정 (MySQL 없이도 실행 가능하도록 local로 변경)&#10;spring.profiles.active=local&#10;&#10;# JPA 공통 설정&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.format_sql=true&#10;" />
              <option name="updatedContent" value="spring.application.name=Navicode&#10;&#10;# 기본 프로파일 설정 (H2 사용)&#10;spring.profiles.active=local&#10;&#10;# JPA 공통 설정&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.format_sql=true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>